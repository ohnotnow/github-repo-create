#!/bin/bash

set -euo pipefail

# Usage: ghrc.sh <repo-name> [entrypoint-file]
# Example: ghrc.sh my-new-repo main.py

if [[ ! -e ".git" ]]; then
    echo "Error: not in a git repository"
    exit 1
fi

REPO_NAME="$1"
if [[ -z "$REPO_NAME" ]]; then
  echo "Usage: $0 <repo-name> [entrypoint-file]"
  exit 1
fi

ENTRYPOINT="${2:-main.py}"
if [[ ! -f "$ENTRYPOINT" ]]; then
  echo "Error: Entrypoint file '$ENTRYPOINT' does not exist."
  exit 1
fi

# Ensure dependencies are installed
command -v gh >/dev/null 2>&1 || { echo >&2 "gh CLI is required but not installed. Aborting."; exit 1; }
command -v jq >/dev/null 2>&1 || { echo >&2 "jq is required but not installed. Aborting."; exit 1; }
: "Ensure OPENAI_API_KEY is exported in your environment"
: "Optional: export OPENAI_MODEL (default: gpt-4o-mini)"

# Create the repository and capture JSON output
echo "Creating GitHub repository '$REPO_NAME'..."
REPO_OUTPUT=$(gh repo create "$REPO_NAME" --public --source . --remote=origin --push)
HTML_URL=$(echo "$REPO_OUTPUT" | grep -Eo 'https://github.com/[^ ]+' | sed 's/\.git$//')

if [[ -z "$HTML_URL" ]]; then
  echo "❌ Failed to extract GitHub repo URL from output:"
  echo "$REPO_OUTPUT"
  exit 1
fi

echo "✓ Created repository: $HTML_URL"

echo "Fetching prompt template..."
PROMPT_FILE="${HOME}/.ghrc-prompt"
if [[ ! -f "$PROMPT_FILE" ]]; then
  echo "Error: Prompt file '$PROMPT_FILE' not found."
  exit 1
fi
PROMPT_TEMPLATE=$(<"$PROMPT_FILE")

# Read entrypoint contents (escape for JSON)
ENTRYP_CONTENT=$(sed 's/"/\\"/g; s/$/\\n/' "$ENTRYPOINT" | tr -d '\r')
MODEL="${OPENAI_MODEL:-o4-mini}"

# Construct full prompt
FULL_PROMPT="$PROMPT_TEMPLATE\n\nRepository URL: $HTML_URL\n\nEntrypoint ($ENTRYPOINT) contents:\n$ENTRYP_CONTENT"
JSON_PAYLOAD=$( jq -n \
                  --arg model "$MODEL" \
                  --arg message "$FULL_PROMPT" \
                  '{"model": $model, "messages": [{"role": "user", "content": $message }]}' )

# Call OpenAI API to generate README.md
echo "Generating README.md via OpenAI..."
RESPONSE=$(curl -sS https://api.openai.com/v1/chat/completions \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $OPENAI_API_KEY" \
  -d "$JSON_PAYLOAD")

# Extract the content and write to README.md
README_MD=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
echo "$README_MD" > README.md
echo "README.md created."

if [[ -f "$HOME/.ghrc-license" ]]; then
    if [[ ! -f "LICENSE" ]]; then
        cp "$HOME/.ghrc-license" ./LICENSE
        git add LICENSE
    fi
fi

# Commit and push the new README.md
git add README.md 
git commit -m "chore: add autogenerated docs"
git push origin HEAD

OVERVIEW=$(echo "${README_MD}" | head -20)
FULL_PROMPT="Please take this overview section of my GitHub Readme, and craft a very succinct description of it I can use as the project description in GitHub (no emoji - a single line less than 100chars - and not special characters are allowed). Please respond with only the description. :: ${OVERVIEW}"
JSON_PAYLOAD=$( jq -n \
                  --arg model "$MODEL" \
                  --arg message "$FULL_PROMPT" \
                  '{"model": $model, "messages": [{"role": "user", "content": $message }]}' )
echo "Generating description via OpenAI..."
RESPONSE=$(curl -sS https://api.openai.com/v1/chat/completions \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $OPENAI_API_KEY" \
  -d "$JSON_PAYLOAD")

DESCRIPTION=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
# try and work around LLM'isms
DESCRIPTION=$(echo "$DESCRIPTION" | tr -d '\n\r\t' | sed 's/  */ /g' | sed 's/^ *//;s/ *$//' | cut -c1-100)


gh repo edit "${HTML_URL}" -d "${DESCRIPTION}"

echo "Done! Your repository is ready at $HTML_URL"


